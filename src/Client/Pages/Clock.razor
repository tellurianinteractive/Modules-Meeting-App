@page "/clock"
@page "/clock/{name}"

@using System.Net
@using System.Timers
@using System.Threading

@implements IDisposable

@inject ClocksService ClocksService
@inject RegistrationsService RegistrationService
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject InteropService InteropService
@inject NavigationManager Navigator

<div style="height: 100%; width: 100%">
    @if (Status == null)
    {
        <div class="message-text">@Localizer["WaitingForData"]</div>
        @if (Registration != null)
        {
            <div class="speed-text">@string.Format(CultureInfo.CurrentCulture, Localizer["CurrentClockName"].Value, Registration.ClockName ?? Localizer["None"]).</div>
        }
    }
    else if (Status.IsUnavailable)
    {
        <div class="message-text">@Localizer["WaitingForBetterTimes"]</div>
        @if (Registration != null)
        {
            <div class="speed-text">@string.Format(CultureInfo.CurrentCulture, Localizer["CurrentClockName"].Value, Registration.ClockName ?? Localizer["None"]).</div>
        }
    }
    else
    {
        @if (Status.Weekday.HasValue())
        {
            <div class="day-text">
                <div class="@Status.StatusClass()">
                    @Localizer[Status.Weekday]
                </div>
            </div>
        }
        @if (Registration.IsAnalouge())
        {
            <AnalogueClock Status="@Status" Registration=@Registration />
        }
        else
        {
            <DigitalClockTime Status="@Status" Registration=@Registration />
        }
        @if (Status.IsPaused)
        {
            <div class="message-text">@Status.PauseMessage(Localizer).</div>
            @if (Status.ExpectedResumeTimeAfterPause.HasValue())
            {
                <div class="message-text">@string.Format(CultureInfo.CurrentCulture, Localizer["SessionIsResumedAtTime"].Value, Status.ExpectedResumeTimeAfterPause)</div>
            }
        }
        else if (Status.IsBreak)
        {
            <div class="message-text">@Localizer["SessionBreak"]</div>
        }
        else if (Status.ShowStoppingMessage())
        {
            <div class="message-text" >@Status.StoppingMessage(Localizer)</div>
        }
        else if (Status.IsCompleted)
        {
            <div class="message-text">@Localizer["SessionEnded"]</div>
        }
        else if (Status.ShowClockQrCode())
        {
            <div class="message-text"><img class="message-qr" src="@Status.ClockUrl(Navigator).QRCode()"  /></div>
        }
        else
        {
            <div class="message-text">@Status.Message</div>
        }
        @if (DisplayStartStopSection)
        {
            @if (IsShowingMore)
            {
                <button class="btn btn-secondary w-100" @onclick="ShowLess">@Localizer["ShowLess"]</button>

                @if (Status.IsRealtime)
                {
                    <div class="message-text">@Localizer["ClockIsRunningInRealTime"].</div>
                }
                else
                {
                    @if (!Status.IsCompleted)
                    {
                        <div>
                            <div class="speed-text">@string.Format(CultureInfo.CurrentCulture, Localizer["CurrentClockName"].Value, Status.Name).</div>
                            <div class="speed-text">@string.Format(CultureInfo.CurrentCulture, Localizer["ClockSpeed"].Value, Status.Speed).</div>
                            <div class="speed-text">@string.Format(CultureInfo.CurrentCulture, Localizer["GameHourIsMinutes"].Value, Status.MinutesPerHour(), Status.SecondsReminderPerHour()).</div>
                            <div class="speed-text">@Status.PauseStatus(Localizer)</div>
                            <div class="speed-text">@Status.GameEndTimeStatus(Localizer)</div>
                        </div>
                        <div class="clock-stop">
                            @if (Registration.IsWithUserNameAndPassword())
                            {
                                @if (Status.IsRunning)
                                {
                                    <div class="form-group">
                                        <EditForm Model="@stopClockModel">
                                            <InputSelect Class="form-control" id="stopReason" @bind-Value="@stopClockModel.Reason">
                                                @foreach (var item in EnumExtensions.StopReasons)
                                                {
                                                    <option value="@item.value">@Localizer[item.display]</option>
                                                }
                                            </InputSelect>
                                        </EditForm>
                                    </div>
                                    @if (stopClockModel.HasReason)
                                    {
                                        <button class="btn btn-danger btn-lg w-100" @onclick="async () => await Stop()">@Localizer["Stop"]</button>
                                    }
                                }
                                else if (Status.IsPaused)
                                {
                                    <div class="speed-text">@Localizer["GameIsPaused"]. @Localizer["OnlyAdministratorCanStart"]. </div>
                                }
                                else
                                {
                                    <button class="btn btn-success btn-lg w-100" @onclick="async () => await Start()">@Localizer["Start"]</button>
                                }
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    @Localizer["RegisterNameAndPasswordForStoppingClock"]<br />
                                </div>
                                <div>
                                    <a class="btn btn-primary btn-sm w-50" href="settings">@Localizer["Settings"]</a>
                                </div>
                            }
                        </div>
                    }
                }
            }
            else
            {
                <button class="btn btn-secondary w-100" @onclick="ShowMore">@Localizer["ShowMore"]</button>
            }
        }
    }
</div>
@code
{
    [Parameter] public string? Name { get; set; }
    ClockStatus? Status;
    PeriodicTimer? UpdateTimer;
    bool IsShowingMore;
    Registration? Registration;
    StoppingClockModel stopClockModel = new StoppingClockModel();
    string? ErrorMessage;
    const int InitialRequestTimeInterval = 2;
    int RequestTimeInterval = InitialRequestTimeInterval;

    protected override async Task OnInitializedAsync()
    {
        UpdateTimer = new PeriodicTimer(TimeSpan.FromSeconds(RequestTimeInterval));
        Registration = await RegistrationService.GetAsync();
        Status = await ClocksService.GetStatusAsync(ClockName, Registration?.UserName, ClientVersion.VersionNumber);
        ErrorMessage = null;
        if (Name.HasValue() && Registration is not null)
        {
            var availableClockNames = await ClocksService.AvailableClocksAsync();
            var name = availableClockNames.SingleOrDefault(n => n.IsSameAs(Name));
            if (name.HasValue())
            {
                Registration.ClockName = Name;
                await RegistrationService.SetAsync(Registration);
            }
        }
        await GetUpdates();
    }

    private async Task GetUpdates()
    {
        while (true)
        {
            if (UpdateTimer is null)
            {
                await Task.Delay(500);
            }
            else
            {
                await UpdateTimer.WaitForNextTickAsync();
            }
            await Update();
        }
    }

    private async Task ShowMore()
    {
        Registration = await RegistrationService.GetAsync();
        IsShowingMore = true;
    }

    private void ShowLess()
    {
        IsShowingMore = false;
    }

    private string TimeFontSize => Status.TimeFontSize(Registration);
    private string OverflowY => Registration?.DisplayTimeMaximized == false ? "auto" : "hidden";

    private bool DisplayStartStopSection => Registration?.DisplayTimeMaximized == false;

    private async Task Update()
    {
        Status = await ClocksService.GetStatusAsync(ClockName, Registration?.UserName, ClientVersion.VersionNumber);
        StateHasChanged();
    }


    private async Task Start()
    {
        ErrorMessage = null;
        if (Status == null || Registration == null) return;
        var result = await ClocksService.StartAsync(ClockName, Registration?.ClockPassword, Registration?.UserName);
        ErrorMessage = GetErrorMessage(result, Localizer["YouAreNotAuthorizedToStartTheClock"]);
        if (ErrorMessage is null)
        {
            ToastService.ShowSuccess(Localizer["ClockWasStarted"]);
        }
        else
        {
            ToastService.ShowError(ErrorMessage);
        }
        StateHasChanged();

    }

    private async Task Stop()
    {
        ErrorMessage = null;
        if (Status == null || Registration == null) return;
        var result = await ClocksService.StopAsync(ClockName, Registration?.ClockPassword, Registration?.UserName, stopClockModel.Reason);
        ErrorMessage = GetErrorMessage(result, Localizer["YouAreNotAuthorizedToStopTheClock"]);
        if (ErrorMessage is null)
        {
            ToastService.ShowWarning(Localizer["ClockWasStopped"]);
        }
        else
        {
            ToastService.ShowError(ErrorMessage);
        }
        stopClockModel = new StoppingClockModel();
        StateHasChanged();
    }

    private string? GetErrorMessage(HttpResponseMessage response, string? unauthorisedMessage)
    {
        if (response.IsSuccessStatusCode)
        {
            if (RequestTimeInterval > InitialRequestTimeInterval)
            {
                RequestTimeInterval = InitialRequestTimeInterval;
                UpdateTimer?.Dispose();
                UpdateTimer = new PeriodicTimer(TimeSpan.FromSeconds(RequestTimeInterval));
            }
            return null;

        }
        else
        {
            var errorMessage = Localizer[response.StatusCode.ToString()].ToString();
            if (response.StatusCode == HttpStatusCode.Unauthorized && unauthorisedMessage is not null)
            {
                errorMessage += ": " + string.Format(CultureInfo.CurrentCulture, unauthorisedMessage);
            }
            else
            {
                errorMessage = response.StatusCode switch
                {
                    HttpStatusCode.NotFound => errorMessage += ": " + IncreaseRequestTime(),
                    _ => errorMessage
                };
            }
            return errorMessage;
        }
    }

    private string IncreaseRequestTime()
    {
        RequestTimeInterval *= 2;
        if (RequestTimeInterval > 120) RequestTimeInterval = 128;
        UpdateTimer?.Dispose();
        UpdateTimer = new PeriodicTimer(TimeSpan.FromSeconds(RequestTimeInterval));
        return $"Request interval is now {RequestTimeInterval}s";
    }

    private string ClockName => Name ?? Registration?.ClockName ?? ClockSettings.DemoClockName;

    private string GameHourIsMinutes(ClockStatus status)
    {
        var seconds = status.SecondsReminderPerHour();
        return seconds == 0 ?
            string.Format(CultureInfo.CurrentCulture, Localizer["GameHourIsMinutes"].Value, status.MinutesPerHour()) :
            string.Format(CultureInfo.CurrentCulture, Localizer["GameHourIsMinutesAndSeconds"].Value, status.MinutesPerHour(), seconds);
    }

    public void Dispose()
    {
        UpdateTimer?.Dispose();
    }
}
