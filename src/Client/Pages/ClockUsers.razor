@page "/clockusers"

@inject ClocksService ClocksService
@inject RegistrationsService Registrations
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

<h1>@Localizer["ClockUsers"]</h1>
<br />
<h2>@string.Format(CultureInfo.CurrentCulture, Localizer["CurrentClockUsers"].Value, Registration?.ClockName)</h2>

@if (Users is not null)
    {
        <table cellpadding="10" cellspacing="5">
            <thead class="thead">
                <tr>
                    <th>@Localizer["UserName"]</th>
                    <th>@Localizer["IPAddress"]</th>
                    <th>@Localizer["LatestAccessTime"]</th>
                    <th>@Localizer["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.IPAddress?.ToString()</td>
                        <td>@user.LastUsedTime</td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <button class="btn btn-info" type="submit" @onclick="async () => await Refresh()">@Localizer["Refresh"]</button>
        </div>
    }


@code {

    Registration? Registration;
    IEnumerable<ClockUser>? Users = Array.Empty<ClockUser>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        Registration = await Registrations.GetAsync();
        if (IsRegistered)
        {
            Users = await ClocksService.GetCurrentUsersAsync(Registration?.ClockName, Registration?.ClockPassword);
        }
        else
        {
            ToastService.ShowWarning(Localizer["NoUsersOrUnathorized"]);
        }
    }

    private bool IsRegistered => Registration != null && !string.IsNullOrWhiteSpace(Registration.UserName) && !string.IsNullOrWhiteSpace(Registration.ClockPassword);
}
