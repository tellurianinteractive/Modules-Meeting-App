@page "/clockadministration"
@using Tellurian.Trains.MeetingApp.Client.Extensions
@using Tellurian.Trains.MeetingApp.Contracts;
@using Tellurian.Trains.MeetingApp.Contracts.Services;
@using Tellurian.Trains.MeetingApp.Contracts.Extensions;

@inject ClocksService Clocks
@inject RegistrationsService Registrations
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService


<h1>@Localizer["ClockSettings"]</h1>

<EditForm Model="@Settings" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="clockname">@Localizer["SetClockName"]</label>
            <InputText Class="form-control" id="clockname" @bind-Value="@Settings.Name" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => Settings.Name)" />
        </div>
        &nbsp;&nbsp;
        <div class="form-group">
            <label for="mode">@Localizer["Mode"]</label>
            <InputSelect Class="form-control" id="mode" @bind-Value="@Settings.Mode" disabled="@IsDisabled">
                <option value="-1">@Localizer["SelectClockMode"]</option>
                <option value="0">@Localizer["Fastclock"]</option>
                <option value="1">@Localizer["Realclock"]</option>
            </InputSelect>
        </div>
    </div>
    @if (IsAdministrator)
    {
        <div class="input-group input-group-lg">
            <div class="form-group">
                <label for="password">@Localizer["SetClockAdministratorPassword"]</label>
                <InputText Class="form-control" id="password" @bind-Value="@Settings.AdministratorPassword" disabled="@IsDemoClock" />
                <ValidationMessage For="@(() => Settings.AdministratorPassword)" />
            </div>
            &nbsp;&nbsp;
            <div class="form-group">
                <label for="password">@Localizer["SetClockUserPassword"]</label>
                <InputText Class="form-control" id="password" @bind-Value="@Settings.UserPassword" disabled="@IsDemoClock" />
                <ValidationMessage For="@(() => Settings.UserPassword)" />
            </div>
        </div>
    }
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="starttime">@Localizer["GameStartTime"]</label>
            <InputText Class="form-control" Id="starttime" @bind-Value="@Settings.StartTime" disabled="@(Settings.IsRunning || IsDisabled)" />
            <ValidationMessage For="@(() => Settings.StartTime)" />
        </div>
        &nbsp;&nbsp;
        @if (!Settings.IsRunning)
        {
            <div class="form-group">
                <label for="elapsed">@Localizer["ContinueGameFromThisTime"]</label>
                <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.OverriddenElapsedTime" disabled="@IsDisabled" />
                <ValidationMessage For="@(() => Settings.OverriddenElapsedTime)" />
            </div>

        }
    </div>
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="duration">@Localizer["GameDuration"]</label>
            <InputNumber Class="form-control" id="duration" TValue="double?" @bind-Value="@Settings.DurationHours" disabled="@IsDisabled" step="0.1" />
            <ValidationMessage For="@(() => Settings.DurationHours)" />
        </div>
        &nbsp;&nbsp;
        <div class="form-group">
            <label for="speed">@Localizer["Speed"]</label>
            <InputNumber Class="form-control" id="speed" TValue="double?" @bind-Value="@Settings.Speed" disabled="@IsDisabled" step="0.1" />
            <ValidationMessage For="@(() => Settings.Speed)" />
        </div>
        &nbsp;&nbsp;
        <div class="form-group">
            <label for="weekday">@Localizer["Weekday"]</label>
            <InputSelect Class="form-control" id="weekday" @bind-Value="@Settings.StartWeekday" disabled="@IsDisabled">
                @foreach (var item in Extensions.EnumExtensions.Weekdays)
                {
                    <option value="@item.value">@Localizer[item.display]</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Settings.StartWeekday)" />
        </div>
    </div>
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="elapsed">@Localizer["PauseAtRealTime"]</label>
            <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.PauseTime" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => Settings.PauseTime)" />
        </div>
        &nbsp;&nbsp;
        <div class="form-group">
            <label for="elapsed">@Localizer["PauseReason"]</label>
            <InputSelect Class="form-control" id="elapsed" @bind-Value="@Settings.PauseReason" disabled="@IsDisabled">
                @foreach (var item in Extensions.EnumExtensions.PauseReasons)
                {
                    <option value="@item.value">@Localizer[item.display]</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Settings.PauseReason)" />
        </div>
        &nbsp;&nbsp;
        <div class="form-group">
            <label for="elapsed">@Localizer["ExpectedResumeTime"]</label>
            <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.ExpectedResumeTime" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => Settings.ExpectedResumeTime)" />
        </div>
    </div>
    <div class="form-check">
        <InputCheckbox Class="form-check-input" @bind-Value="@Settings.ShowRealTimeWhenPaused" disabled="@IsDisabled" />
        <label class="form-check-label" for="running">@Localizer["ShowRealTimeWhenPaused"]</label>
    </div>
    &nbsp;&nbsp;
    <div class="form-check">
        <InputCheckbox class="form-check-input" id="DisplayTimeMaximized" @bind-Value="@Registration.DisplayTimeMaximized"></InputCheckbox>
        <label class="form-check-label" for="DisplayTimeMaximized">@Localizer["DisplayTimeMaximized"]</label>
    </div>
    &nbsp;&nbsp;
    <div class="form-group ">
        <label for="message">@Localizer["Message"]</label>
        <InputTextArea Class="form-control " id="message" @bind-Value="@Settings.Message" disabled="@IsDisabled" />
    </div>

    @if (IsAdministrator)
    {
        @if (IsNew)
        {
            <div class="alert alert-info">
                @Localizer["ChangeClockSettingsAndThenClickSaveToConfirmNewClock"]
            </div>
            <div>
                <button class="btn btn-primary" type="submit" title=@Localizer["ApplyTooltip"]>@Localizer["Save"]</button>
            </div>
        }
        else
        {
            <div>
                <button class="btn btn-primary" type="submit" title=@Localizer["ApplyTooltip"]>@Localizer["Apply"]</button>
            </div>
        }
    }
</EditForm>
<hr />
@if (Settings.Mode == "0")
{
    @if (Settings.IsRunning)
    {
        <button class="btn btn-danger" title=@Localizer["StopTooltip"] @onclick="async () => await Stop()">@Localizer["Stop"]</button>
    }
    else
    {
        <button class="btn btn-success" title=@Localizer["StartTooltip"] @onclick="async () => await Start()">@Localizer["Start"]</button>
        @if (Settings.IsElapsed)
        {
            <button class="btn btn-warning" title=@Localizer["ResetTooltip"] @onclick="async () => await Restart()">@Localizer["Reset"]</button>
        }
    }
}
<button class="btn btn-info" title=@Localizer["RefreshTooltip"] @onclick="async () => await Refresh()">@Localizer["Refresh"]</button>
@if (HasUsername)
{
    <button class="btn btn-secondary" title=@Localizer["CreateNewClockTooltip"] @onclick="CreateNewClock">@Localizer["CreateNewClock"]</button>
}



@code {
    ClockSettings Settings = new ClockSettings();
    Registration Registration = new Registration();
    string? CurrentAdministratorPassword;
    bool IsSaved = false;
    bool IsNew = false;

    protected override async Task OnInitializedAsync()
    {
        var availableClocks = await Clocks.AvailableClocksAsync();
        Registration = await Registrations.UseAvailableClockOnlyAsync(availableClocks);
        await Refresh();
        if (!IsAdministrator)
        {
            ToastService.ShowInfo(Localizer["RegisterNameAndPassword"], Localizer["Note"]);
        }
    }

    private async Task AfterAction(bool isSaved)
    {
        IsSaved = isSaved;
        IsNew = false;
        await Refresh();
    }

    private async Task Restart()
    {
        Settings.ShouldRestart = true;
        ToastService.ShowWarning(Localizer["ClockWasRestarted"], Localizer["Note"]);
        await OnValidSubmit();
    }

    private async Task OnValidSubmit()
    {
        if (IsNew)
        {
            var response = await Clocks.CreateAsync(Registration.UserName, Settings);
            var newSettings = await Clocks.GetSettingsAsync(Settings.Name, Settings.AdministratorPassword);
            if (newSettings is not null)
            {
                Settings = newSettings;
                Registration.ClockName = UpdatedClockName;
                Registration.ClockPassword = Settings.AdministratorPassword;
                await Registrations.SetAsync(Registration);
                ToastService.ShowSuccess(Localizer["ClockWasCreated"], Localizer["Note"]);
            }
            else
            {
                ToastService.ShowError(await response.GetErrorMessagesAsync(), Localizer["Error"]);
            }
        }
        else
        {
            var response = await Clocks.UpdateAsync(UpdatedClockName, Registration.UserName, CurrentAdministratorPassword, Settings);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess(Localizer["Saved"], Localizer["Success"]);
            }
        }
        await AfterAction(true);
    }

    private async Task Refresh()
    {
        Settings = await Clocks.GetSettingsAsync(ClockName, Registration.ClockPassword) ?? new ClockSettings();
        CurrentAdministratorPassword = Settings?.AdministratorPassword;
    }

    private void CreateNewClock()
    {
        Settings = new ClockSettings
            {
                Name = Localizer["Clock"].Value + "1234567890".Random(3),
                AdministratorPassword = "ABCDEFGHIHKLMNOPQRSTUVXYZ123456789".Random(8),
                UserPassword = "ABCDEFGHIHKLMNOPQRSTUVXYZ123456789".Random(4),
                StartTime = "06:00"
            };
        IsNew = true;
    }

    private async Task Start()
    {
        var result = await Clocks.StartAsync(ClockName, Registration?.ClockPassword, Registration?.UserName);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess(Localizer["ClockWasStarted"], Localizer["Note"]);
        }
        else
        {
            ToastService.ShowError(Localizer["NotAuthorized"], Localizer["Note"]);
        }
        await AfterAction(false);
    }

    private async Task Stop()
    {
        var result = await Clocks.StopAsync(ClockName, Registration?.ClockPassword, Registration?.UserName, nameof(Contracts.Models.StopReason.Other));
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowWarning(Localizer["ClockWasStopped"], Localizer["Note"]);
        }
        else
        {
            ToastService.ShowError(Localizer["NotAuthorized"], Localizer["Note"]);
        }
        await AfterAction(false);
    }

    private void OnInvalidSubmit()
    {
        ToastService.ShowError(Localizer["InvalidSettings"], Localizer["NotExecuted"]);
    }


    private string ClockName => Registration.ClockName ?? ClockSettings.DemoClockName;
    private string UpdatedClockName => Settings.Name ?? Registration.ClockName ?? ClockSettings.DemoClockName;

    private bool IsAdministrator => IsNew || (Registration.IsWithUserNameAndPassword() && Registration.ClockPassword == CurrentAdministratorPassword);
    private bool IsDemoClock => ClockSettings.DemoClockName.Equals(Settings.Name, StringComparison.OrdinalIgnoreCase);
    private bool IsDisabled => !IsAdministrator;
    private bool HasUsername => !string.IsNullOrWhiteSpace(Registration.UserName);
}
