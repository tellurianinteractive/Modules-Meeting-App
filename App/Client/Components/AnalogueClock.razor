<div style="height: @ClockHeight;">
    <svg xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         viewBox="-1024 -1024 2048 2048" width="100%" height="100%" preserveAspectRatio="xMidYMid meet">
        <style type="text/css">
            .bg {
                stroke: none;
                fill: white;
            }

            .fc {
                stroke: none;
                fill: black;
            }

            .h1 {
                stroke: none;
                fill: black;
            }

            .h2 {
                stroke: none;
                fill: #aa0000;
            }
        </style>
        <defs>
            <path id="mark1" d="M -20,-1000 l 40,0 0,100 -40,0 z" />
            <path id="mark2" d="M -40,-1000 l 80,0 0,240 -80,0 z" />
            <path id="mark3" d="M -40,-1000 l 80,0 0,300 -80,0 z" />
            <path id="handh" d="M -50,-600  l 50,-50 50,50 0,800  -100,0 z" />
            <path id="handm" d="M -40,-900  l 40,-40 40,40 0,1180 -80,0  z" />
            <g id="hands">
                <path d="M -10,-910 l  10,-10 10,10 2,300 -24,0 z
               M -13,-390 l  26,0         7,690 -40,0 z" />
                <path d="M   0,-620 a 120,120 0 0 1 0,240
                          a 120,120 0 0 1 0,-240 z
               M   0,-560 a  60,60  0 0 0 0,120
                          a  60,60  0 0 0 0,-120 z" />
            </g>
            <g id="face1">
                <use xlink:href="#mark1" transform="rotate(06)" />
                <use xlink:href="#mark1" transform="rotate(12)" />
                <use xlink:href="#mark1" transform="rotate(18)" />
                <use xlink:href="#mark1" transform="rotate(24)" />
            </g>
            <g id="face2">
                <use xlink:href="#face1" />
                <use xlink:href="#face1" transform="rotate(30)" />
                <use xlink:href="#face1" transform="rotate(60)" />
                <use xlink:href="#mark3" />
                <use xlink:href="#mark2" transform="rotate(30)" />
                <use xlink:href="#mark2" transform="rotate(60)" />
            </g>
            <g id="face">
                <use xlink:href="#face2" />
                <use xlink:href="#face2" transform="rotate(90)" />
                <use xlink:href="#face2" transform="rotate(180)" />
                <use xlink:href="#face2" transform="rotate(270)" />
            </g>
        </defs>
        <circle class="bg" r="1024" />
        <use xlink:href="#face" class="fc" />
        @Hour
        @Minute
        @if (!Status.IsRealtime == true)
        {
            @Second         
        }
    </svg>
</div>

@code {
    [Parameter] public ClockStatus? Status { get; set; }
    [Parameter] public Registration? Registration { get; set; }

    string ClockHeight => Registration?.DisplayTimeMaximized == false ? "64vw" : "40vw";

    MarkupString Hour => $"<use xlink:href=\"#handh\" class=\"h1\" transform=\"rotate({HourRotate(Status.Hours())})\" />".ToMarkup();
    MarkupString Minute => $"<use xlink:href=\"#handm\" class=\"h1\" transform=\"rotate({MinuteRotate(Status.Minutes())})\" />".ToMarkup();
    MarkupString Second => $"<use xlink:href=\"#hands\" class=\"h2\" transform=\"rotate({SecondRotate(Seconds)})\" />".ToMarkup();

    string HourRotate(double hours) => ((hours * 30.0) % 360).ToString("F1", CultureInfo.InvariantCulture);
    string MinuteRotate(double minutes) => (minutes * 6.0).ToString("F1", CultureInfo.InvariantCulture);
    string SecondRotate(double seconds) => (seconds * 6.0).ToString("F1", CultureInfo.InvariantCulture);
    double Hours = -1;
    int Minutes;
    int Seconds;

    protected override async Task OnParametersSetAsync()
    {
        const int secMax = 60;
        if (Status is null || !Status.IsRunning) return;
        var hours = Status.Hours();
        var minutes = Status.Minutes();
        if (hours == Hours && minutes == Minutes) return;
        if (Seconds > 0 && Seconds < secMax) return;
        var seconds = Status.SecondsPerGameMinute();
        var delay = TimeSpan.FromSeconds(seconds / 80.0);
        for (var sec = 0; sec < secMax; sec++)
        {
            Seconds = sec;
            if (Status.IsRunning)
            {
                this.StateHasChanged();
                await Task.Delay(delay);
            }
            else break;

        }
        Hours = hours;
        Minutes = minutes;
        Seconds = secMax == 60 ? 0 : secMax;
    }


}
