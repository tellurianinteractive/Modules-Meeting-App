@page "/settings"
@using Tellurian.Trains.MeetingApp.Contract.Extensions

@inject ClocksService ClockService
@inject RegistrationsService Registrations
@inject ContentService ContentService
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService


<h2>@Localizer["Settings"]</h2>

@if (ShowInstruction)
{
    @if (Html is null)
    {
        <div>@Localizer["WaitingForData"]</div>
    }
    else
    {
        @((MarkupString)Html)
        <hr />
    }
}


<EditForm Model="@Registration" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="elapsed">@Localizer["StationOrPersonalName"]</label>
        <InputText Class="form-control" id="elapsed" @bind-Value="@Registration.UserName" @oninput="@OnChange" />
    </div>

    <div class="form-group">
        <label for="clock">@Localizer["SelectClock"]</label>
        <InputSelect Class="form-control" id="clock" @bind-Value="@Registration.ClockName" @onselect="@OnSelect" @oninput="@OnChange">
            @foreach (var clock in AvailableClocks)
            {
                <option value="@clock">@clock</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="elapsed">@Localizer["ClockPassword"]</label>
        <InputText type="password" Class="form-control" id="elapsed" @bind-Value="@Registration.ClockPassword" @oninput="@OnChange" />
    </div>
    <div class="form-group">
        <label for="display">@Localizer["SelectDisplay"]</label>
        <InputSelect Class="form-control" id="display" @bind-Value="@Registration.Display" @onselect="@OnSelect" @oninput="@OnChange">
            @foreach (var display in EnumExtensions.Displays)
            {
                <option value="@display.display">@Localizer[display.display]</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="theme">@Localizer["SelectTheme"]</label>
        <InputSelect Class="form-control" id="theme" @bind-Value="@Registration.Theme" @onselect="@OnSelect" @oninput="@OnChange">
            @foreach (var theme in EnumExtensions.Themes)
            {
                <option value="@theme.display">@Localizer[theme.display]</option>
            }
        </InputSelect>
    </div>
    <div class="form-check">
        <InputCheckbox class="form-check-input" id="DisplayTimeMaximized" @bind-Value="@Registration.DisplayTimeMaximized"></InputCheckbox>
        <label class="form-check-label" for="DisplayTimeMaximized">@Localizer["DisplayTimeMaximized"]</label>
    </div>
    <hr />
    <button disabled="@IsSaveDisabled" class="btn btn-primary" type="submit">@Localizer["Save"]</button>
</EditForm>

@code {
    Registration Registration = new Registration();
    IEnumerable<string> AvailableClocks = Array.Empty<string>();
    bool IsSaved = false;
    string? OldTheme;
    string? ErrorMessage = null;
    private string? Html;

    protected override async Task OnInitializedAsync()
    {
        ErrorMessage = null;
        AvailableClocks = await ClockService.AvailableClocks();
        Registration = await Registrations.UseAvailableClockOnly(AvailableClocks);
        Html = await ContentService.GetHtmlContent(CultureInfo.CurrentCulture, "Settings");
        OldTheme = Registration.Theme;
    }

    private void OnChange(ChangeEventArgs args)
    {
        SetDirty();
    }

    private void OnSelect(EventArgs args)
    {
        SetDirty();
    }

    private void SetDirty()
    {
        IsSaved = false;
        ErrorMessage = null;
        this.StateHasChanged();
    }

    private async Task Save()
    {
        IsSaved = await Registrations.Set(Registration);
        if (IsSaved)
        {
            ToastService.ShowSuccess(Localizer["Saved"], Localizer["Success"]);
            if (IsThemeChanged)
            {
                ToastService.ShowWarning(Localizer["ThemeHasChangedPleaseReloadApp"], Localizer["Note"]);
            }
        }
        await UpdateClockUser();
    }

    private async Task UpdateClockUser()
    {
        if (Registration.IsWithUserNameAndClockName())
        {
            var result = await ClockService.User(Registration.ClockName ?? "", Registration.ClockPassword, Registration.UserName, Client.VersionNumber);
            if (!result.IsSuccessStatusCode)
            {
                ErrorMessage = Localizer[result.StatusCode.ToString()];
                if (result.StatusCode == System.Net.HttpStatusCode.Conflict)
                {
                    ErrorMessage += ": " + string.Format(CultureInfo.CurrentCulture, Localizer["UsernameIsAlreadyTaken"].Value, Registration.UserName);
                    ToastService.ShowError(ErrorMessage, Localizer["Error"]);
                }
            }
        }
    }

    private bool ShowInstruction => !IsSaved && (!Registration.IsWithUserName() || Registration.IsInstructionVisible);
    private bool IsSaveDisabled => IsSaved || AvailableClocks == null;
    private bool IsThemeChanged => OldTheme != Registration.Theme && IsSaved;
}
